// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// edlibalign
Rcpp::List edlibalign(std::string query, std::string target, std::string input_mode, std::string input_task, int k, std::string cigar_format, Rcpp::Nullable<Rcpp::List> input_additionalEqualities);
RcppExport SEXP _edlibR_edlibalign(SEXP querySEXP, SEXP targetSEXP, SEXP input_modeSEXP, SEXP input_taskSEXP, SEXP kSEXP, SEXP cigar_formatSEXP, SEXP input_additionalEqualitiesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type query(querySEXP);
    Rcpp::traits::input_parameter< std::string >::type target(targetSEXP);
    Rcpp::traits::input_parameter< std::string >::type input_mode(input_modeSEXP);
    Rcpp::traits::input_parameter< std::string >::type input_task(input_taskSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< std::string >::type cigar_format(cigar_formatSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type input_additionalEqualities(input_additionalEqualitiesSEXP);
    rcpp_result_gen = Rcpp::wrap(edlibalign(query, target, input_mode, input_task, k, cigar_format, input_additionalEqualities));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_edlibR_edlibalign", (DL_FUNC) &_edlibR_edlibalign, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_edlibR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
